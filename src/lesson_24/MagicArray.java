package lesson_24;

import java.util.Arrays;

/**
 * @author Sergey Bugaenko
 * {@code @date} 19.05.2025
 */

public class MagicArray {

    int[] array;
    int cursor; // по умолчанию = 0

    // Методы, расширяющие функционал массива

    public MagicArray() {
        this.array = new int[10]; // [0, 0, 0...0]
    }

    // Добавление в массив одного элемента
    void add(int value) {

        // Проверка!
        // Есть ли свободное место во внутреннем массиве
        // Если места нет - место нужно добавить

        if (cursor == array.length) {
            // Расширить внутренний массив перед добавлением нового значения
            expandArray();
        }

        array[cursor] = value;
        cursor++;
    }

    // Динамическое расширение массива
    void expandArray() {
        System.out.println("Расширяем внутренний массив! Курсор = " + cursor);
        /*
        1. Создать новый массив бОльшего размера (в 2 раза больше)
        2. Переписать в новый массив все значения из старого массива (до курсора)
        3. Перебросить ссылку
         */

        // 1.
        int[] newArray = new int[array.length * 2];

        // 2
        for (int i = 0; i < cursor; i++) {
            newArray[i] = array[i];
        }

        // Перебрасываю ссылку. Переменная (поле) array хранит ссылку на "новый" массив
        array = newArray;
    }


    // Добавление в массив сразу нескольких значений
    void add(int... numbers) {
        // с numbers можно обращаться точно также, как со ссылкой на массив
//        System.out.println("Принял несколько int: " + numbers.length);
//        System.out.println("значения: " + Arrays.toString(numbers));
//        System.out.println("У каждого есть индекс, как в массиве: " + numbers[0]);

        // Перебираю все значения. Для каждого вызываю метод add()
        for (int i = 0; i < numbers.length; i++) {
            add(numbers[i]);
        }

    }

    // Возвращает строковое представление массива
    // [5, 20, 45, ]
    // "[10
    public String toString() {
        // перебрать все "значимые" элементы = с индексами от 0 до cursor минус 1

        if (cursor == 0) return "[]";

        String result = "[";
        for (int i = 0; i < cursor; i++) {
            result += array[i] + (i < cursor - 1 ? ", " : "]");
        }

        return result;
    }

    // Текущее кол-во элементов в массиве
    int size() {
        return cursor;
    }

    // Возвращает значение по индексу
    int get(int index) {
        // Проверить входящий индекс

        if (index >= 0 && index < cursor) {
            return array[index];
        }

        // Todo Поправить обработку некорректного индекса
        // FIXME закладка

        // Код, если индекс не корректный
        // Хорошего решения нет.
        return -2_147_483_647;
    }

    // Удалить элемент по индексу. Возвращает старое значение.
    int remove(int index) {
        /*
        1. Проверка индекса на валидность
            1.1. Запомнить старое значение
        2. Удалить значение по индексу
        3. Передвинуть курсор влево (т.к. кол-во элементов уменьшилось)
        4. Вернуть старое значение
         */

        if (index >= 0 && index < cursor) {
            // Логика удаления
            int value = array[index];

            // Перебираем элементы начиная с индекса и перезаписываем значением из ячейки справа
            for (int i = index; i < cursor - 1; i++) {
                array[i] = array[i + 1];
            }

            cursor--;

//            System.out.println("внутренний массив: " + Arrays.toString(array));

            return value;

        } else {
            // Индекс не валидный
            // Ничего не удаляем, но вернуть что-то нужно
            // FIXME поправить возвращаемое значение
            return -2_147_483_647;
        }
    }

    // Поиск по значению. Первое вхождение
    // {1, 100, 5, 24, 0, 5} -> indexOf(5) ? индекс значения : отрицательно значение => 2
    int indexOf(int value) {
        /*
        Перебираю все значимые элементы
        Если элемент равен искомому - вернуть индекс такого элемента
         */
        for (int i = 0; i < cursor; i++) {
            if (array[i] == value) {
                // Значения совпали. Возвращаю индекс:
                return i;
            }
        }

        // Сюда мы попадем, если ни одно значение в массиве не совпало с искомым
        return  -1;
    }

    // Поиск последнего вхождения
    // {1, 100, 5, 24, 0, 5} -> lastIndexOf(5) =>
    int lastIndexOf(int index) {
        // Todo Homework
        return -1;
    }

    // Удаление элемента по значению
    boolean removeByValue(int value) {
        // Todo Homework!
        // ПЕРЕИСПОЛЬЗУЙТЕ уже написанные методы

        return false;

    }




} // End class

/*
0. Динамическое изменение размера внутреннего массива ++
1. Добавлять в массив элемент (не думаю об индексах, размере массива) ++
2. Добавить в массив сразу несколько значений ++
3. Возвратить строковое представление массива (все элементы массива в одной строке) ++
4. Текущее кол-во элементов в массиве ++

5. Возвращает значение по индексу ++
6. Удалить элемент по индексу (есть индекс - удалить элемент из этой ячейки). Возвращает старое значение.  ++
7. Удалять элемент по значению. Возвращает boolean. Если удалил - вернет true. Не нашел что удалять - false
8. Поиск по значению. Первое вхождение ++
9. Поиск по значению. Последнее вхождение

 */